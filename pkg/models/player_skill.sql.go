// Code generated by sqlc. DO NOT EDIT.
// source: player_skill.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const AddSkillToPlayer = `-- name: AddSkillToPlayer :exec
INSERT INTO player_skill (
  player_id, skill_id, value
) VALUES (
  $1, $2, $3
)
`

type AddSkillToPlayerParams struct {
	PlayerID uuid.UUID `json:"player_id"`
	SkillID  uuid.UUID `json:"skill_id"`
	Value    int32     `json:"value"`
}

func (q *Queries) AddSkillToPlayer(ctx context.Context, arg AddSkillToPlayerParams) error {
	_, err := q.db.Exec(ctx, AddSkillToPlayer, arg.PlayerID, arg.SkillID, arg.Value)
	return err
}

const ChangePlayerSkill = `-- name: ChangePlayerSkill :exec
UPDATE player_skill 
	SET skill_id = $1 
	WHERE player_id = $2
`

type ChangePlayerSkillParams struct {
	SkillID  uuid.UUID `json:"skill_id"`
	PlayerID uuid.UUID `json:"player_id"`
}

func (q *Queries) ChangePlayerSkill(ctx context.Context, arg ChangePlayerSkillParams) error {
	_, err := q.db.Exec(ctx, ChangePlayerSkill, arg.SkillID, arg.PlayerID)
	return err
}

const DeleteAllPlayerSkills = `-- name: DeleteAllPlayerSkills :exec
DELETE FROM player_skill
`

func (q *Queries) DeleteAllPlayerSkills(ctx context.Context) error {
	_, err := q.db.Exec(ctx, DeleteAllPlayerSkills)
	return err
}

const ListPlayerSkills = `-- name: ListPlayerSkills :many
SELECT player_id, skill_id, created_at, value 
    FROM player_skill
    WHERE skill_id = $1
    ORDER BY name
`

func (q *Queries) ListPlayerSkills(ctx context.Context, skillID uuid.UUID) ([]PlayerSkill, error) {
	rows, err := q.db.Query(ctx, ListPlayerSkills, skillID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlayerSkill
	for rows.Next() {
		var i PlayerSkill
		if err := rows.Scan(
			&i.PlayerID,
			&i.SkillID,
			&i.CreatedAt,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
