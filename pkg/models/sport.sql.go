// Code generated by sqlc. DO NOT EDIT.
// source: sport.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const CreateSport = `-- name: CreateSport :one
INSERT INTO sport (
  id, name, description, skill_weights, max_active_players_per_team, max_players_per_team
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, created_at, updated_at, description, skill_weights, max_active_players_per_team, max_players_per_team
`

type CreateSportParams struct {
	ID                      uuid.UUID    `json:"id"`
	Name                    string       `json:"name"`
	Description             string       `json:"description"`
	SkillWeights            pgtype.JSONB `json:"skill_weights"`
	MaxActivePlayersPerTeam int16        `json:"max_active_players_per_team"`
	MaxPlayersPerTeam       int16        `json:"max_players_per_team"`
}

func (q *Queries) CreateSport(ctx context.Context, arg CreateSportParams) (Sport, error) {
	row := q.db.QueryRow(ctx, CreateSport,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.SkillWeights,
		arg.MaxActivePlayersPerTeam,
		arg.MaxPlayersPerTeam,
	)
	var i Sport
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.SkillWeights,
		&i.MaxActivePlayersPerTeam,
		&i.MaxPlayersPerTeam,
	)
	return i, err
}

const DeleteAllSports = `-- name: DeleteAllSports :exec
DELETE FROM sport
`

func (q *Queries) DeleteAllSports(ctx context.Context) error {
	_, err := q.db.Exec(ctx, DeleteAllSports)
	return err
}

const DeleteSport = `-- name: DeleteSport :exec
DELETE FROM sport
WHERE id = $1
`

func (q *Queries) DeleteSport(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteSport, id)
	return err
}

const GetSport = `-- name: GetSport :one
SELECT id, name, created_at, updated_at, description, skill_weights, max_active_players_per_team, max_players_per_team FROM sport
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSport(ctx context.Context, id uuid.UUID) (Sport, error) {
	row := q.db.QueryRow(ctx, GetSport, id)
	var i Sport
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.SkillWeights,
		&i.MaxActivePlayersPerTeam,
		&i.MaxPlayersPerTeam,
	)
	return i, err
}

const ListSports = `-- name: ListSports :many
SELECT id, name, created_at, updated_at, description, skill_weights, max_active_players_per_team, max_players_per_team FROM sport
ORDER BY name
`

func (q *Queries) ListSports(ctx context.Context) ([]Sport, error) {
	rows, err := q.db.Query(ctx, ListSports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sport
	for rows.Next() {
		var i Sport
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.SkillWeights,
			&i.MaxActivePlayersPerTeam,
			&i.MaxPlayersPerTeam,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
