// Code generated by sqlc. DO NOT EDIT.
// source: player.sql

package models

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const CreatePlayer = `-- name: CreatePlayer :one
INSERT INTO player (
  id, first_name, last_name, name, skills
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, name, created_at, updated_at, first_name, last_name, skills
`

type CreatePlayerParams struct {
	ID        uuid.UUID    `json:"id"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Name      string       `json:"name"`
	Skills    pgtype.JSONB `json:"skills"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, CreatePlayer,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Name,
		arg.Skills,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Skills,
	)
	return i, err
}

const DeleteAllPlayers = `-- name: DeleteAllPlayers :exec
DELETE FROM player
`

func (q *Queries) DeleteAllPlayers(ctx context.Context) error {
	_, err := q.db.Exec(ctx, DeleteAllPlayers)
	return err
}

const DeletePlayer = `-- name: DeletePlayer :exec
DELETE FROM player
WHERE id = $1
`

func (q *Queries) DeletePlayer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeletePlayer, id)
	return err
}

const GetPlayer = `-- name: GetPlayer :one
SELECT player.id, player.name, player.created_at, player.updated_at, first_name, last_name, skills, player_id, team_id, joined_at, team.id, team.name, team.created_at, team.updated_at
  FROM player
  JOIN player_team ON player_team.player_id = player.id
  JOIN team ON player_team.team_id = team.id
  WHERE player.id = $1
`

type GetPlayerRow struct {
	ID          uuid.UUID    `json:"id"`
	Name        string       `json:"name"`
	CreatedAt   time.Time    `json:"created_at"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
	FirstName   string       `json:"first_name"`
	LastName    string       `json:"last_name"`
	Skills      pgtype.JSONB `json:"skills"`
	PlayerID    uuid.UUID    `json:"player_id"`
	TeamID      uuid.UUID    `json:"team_id"`
	JoinedAt    time.Time    `json:"joined_at"`
	ID_2        uuid.UUID    `json:"id_2"`
	Name_2      string       `json:"name_2"`
	CreatedAt_2 time.Time    `json:"created_at_2"`
	UpdatedAt_2 sql.NullTime `json:"updated_at_2"`
}

func (q *Queries) GetPlayer(ctx context.Context, id uuid.UUID) (GetPlayerRow, error) {
	row := q.db.QueryRow(ctx, GetPlayer, id)
	var i GetPlayerRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Skills,
		&i.PlayerID,
		&i.TeamID,
		&i.JoinedAt,
		&i.ID_2,
		&i.Name_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}

const ListPlayers = `-- name: ListPlayers :many
SELECT id, name, created_at, updated_at, first_name, last_name, skills FROM player
ORDER BY name
`

func (q *Queries) ListPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.Query(ctx, ListPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Skills,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPlayersByTeamID = `-- name: ListPlayersByTeamID :many
SELECT player.id, player.name, player.created_at, player.updated_at, first_name, last_name, skills, player_id, team_id, joined_at, team.id, team.name, team.created_at, team.updated_at
  FROM player
  JOIN player_team ON player_team.player_id = player.id
  JOIN team ON player_team.team_id = team.id
  WHERE team.id = $1
`

type ListPlayersByTeamIDRow struct {
	ID          uuid.UUID    `json:"id"`
	Name        string       `json:"name"`
	CreatedAt   time.Time    `json:"created_at"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
	FirstName   string       `json:"first_name"`
	LastName    string       `json:"last_name"`
	Skills      pgtype.JSONB `json:"skills"`
	PlayerID    uuid.UUID    `json:"player_id"`
	TeamID      uuid.UUID    `json:"team_id"`
	JoinedAt    time.Time    `json:"joined_at"`
	ID_2        uuid.UUID    `json:"id_2"`
	Name_2      string       `json:"name_2"`
	CreatedAt_2 time.Time    `json:"created_at_2"`
	UpdatedAt_2 sql.NullTime `json:"updated_at_2"`
}

func (q *Queries) ListPlayersByTeamID(ctx context.Context, id uuid.UUID) ([]ListPlayersByTeamIDRow, error) {
	rows, err := q.db.Query(ctx, ListPlayersByTeamID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPlayersByTeamIDRow
	for rows.Next() {
		var i ListPlayersByTeamIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Skills,
			&i.PlayerID,
			&i.TeamID,
			&i.JoinedAt,
			&i.ID_2,
			&i.Name_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
