// Code generated by sqlc. DO NOT EDIT.
// source: team.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const CreateTeam = `-- name: CreateTeam :one
INSERT INTO team (
  id, name, sport_name, power_score
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, created_at, updated_at, sport_name, power_score, wins, losses
`

type CreateTeamParams struct {
	ID         uuid.UUID `json:"id"`
	Name       string    `json:"name"`
	SportName  string    `json:"sport_name"`
	PowerScore float32   `json:"power_score"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, CreateTeam,
		arg.ID,
		arg.Name,
		arg.SportName,
		arg.PowerScore,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SportName,
		&i.PowerScore,
		&i.Wins,
		&i.Losses,
	)
	return i, err
}

const DeleteAllTeams = `-- name: DeleteAllTeams :exec
DELETE FROM team
`

func (q *Queries) DeleteAllTeams(ctx context.Context) error {
	_, err := q.db.Exec(ctx, DeleteAllTeams)
	return err
}

const DeleteTeam = `-- name: DeleteTeam :exec
DELETE FROM team
WHERE id = $1
`

func (q *Queries) DeleteTeam(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteTeam, id)
	return err
}

const GetTeam = `-- name: GetTeam :one
SELECT id, name, created_at, updated_at, sport_name, power_score, wins, losses FROM team
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTeam(ctx context.Context, id uuid.UUID) (Team, error) {
	row := q.db.QueryRow(ctx, GetTeam, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SportName,
		&i.PowerScore,
		&i.Wins,
		&i.Losses,
	)
	return i, err
}

const ListTeams = `-- name: ListTeams :many
SELECT id, name, created_at, updated_at, sport_name, power_score, wins, losses FROM team
ORDER BY name
`

func (q *Queries) ListTeams(ctx context.Context) ([]Team, error) {
	rows, err := q.db.Query(ctx, ListTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SportName,
			&i.PowerScore,
			&i.Wins,
			&i.Losses,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListTeamsForPlayer = `-- name: ListTeamsForPlayer :many
SELECT t.id, t.name, t.created_at, t.updated_at, t.sport_name, t.power_score, t.wins, t.losses 
	FROM player p
	JOIN team t ON t.id = ANY(p.teams)
	WHERE p.id = $1
`

func (q *Queries) ListTeamsForPlayer(ctx context.Context, id uuid.UUID) ([]Team, error) {
	rows, err := q.db.Query(ctx, ListTeamsForPlayer, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SportName,
			&i.PowerScore,
			&i.Wins,
			&i.Losses,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
