// Code generated by sqlc. DO NOT EDIT.
// source: team.sql

package models

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const CreateTeam = `-- name: CreateTeam :one
INSERT INTO team (
  id, name
) VALUES (
  $1, $2
)
RETURNING id, name, created_at, updated_at
`

type CreateTeamParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, CreateTeam, arg.ID, arg.Name)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteAllTeams = `-- name: DeleteAllTeams :exec
DELETE FROM team
`

func (q *Queries) DeleteAllTeams(ctx context.Context) error {
	_, err := q.db.Exec(ctx, DeleteAllTeams)
	return err
}

const DeleteTeam = `-- name: DeleteTeam :exec
DELETE FROM team
WHERE id = $1
`

func (q *Queries) DeleteTeam(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteTeam, id)
	return err
}

const GetTeam = `-- name: GetTeam :one
SELECT id, name, created_at, updated_at FROM team
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTeam(ctx context.Context, id uuid.UUID) (Team, error) {
	row := q.db.QueryRow(ctx, GetTeam, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListTeams = `-- name: ListTeams :many
SELECT id, name, created_at, updated_at FROM team
ORDER BY name
`

func (q *Queries) ListTeams(ctx context.Context) ([]Team, error) {
	rows, err := q.db.Query(ctx, ListTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListTeamsByPlayerID = `-- name: ListTeamsByPlayerID :many
SELECT player_id, team_id, joined_at, id, name, created_at, updated_at
  FROM player_team pt
  JOIN team ON team.id = pt.team_id
  WHERE pt.player_id = $1
`

type ListTeamsByPlayerIDRow struct {
	PlayerID  uuid.UUID    `json:"player_id"`
	TeamID    uuid.UUID    `json:"team_id"`
	JoinedAt  time.Time    `json:"joined_at"`
	ID        uuid.UUID    `json:"id"`
	Name      string       `json:"name"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) ListTeamsByPlayerID(ctx context.Context, playerID uuid.UUID) ([]ListTeamsByPlayerIDRow, error) {
	rows, err := q.db.Query(ctx, ListTeamsByPlayerID, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTeamsByPlayerIDRow
	for rows.Next() {
		var i ListTeamsByPlayerIDRow
		if err := rows.Scan(
			&i.PlayerID,
			&i.TeamID,
			&i.JoinedAt,
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
