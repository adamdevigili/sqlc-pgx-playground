// Code generated by sqlc. DO NOT EDIT.
// source: player_team.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const AddPlayerToTeam = `-- name: AddPlayerToTeam :exec
INSERT INTO player_team (
  player_id, team_id
) VALUES (
  $1, $2
)
`

type AddPlayerToTeamParams struct {
	PlayerID uuid.UUID `json:"player_id"`
	TeamID   uuid.UUID `json:"team_id"`
}

func (q *Queries) AddPlayerToTeam(ctx context.Context, arg AddPlayerToTeamParams) error {
	_, err := q.db.Exec(ctx, AddPlayerToTeam, arg.PlayerID, arg.TeamID)
	return err
}

const ChangePlayerTeam = `-- name: ChangePlayerTeam :exec
UPDATE player_team 
	SET team_id = $1 
	WHERE player_id = $2
`

type ChangePlayerTeamParams struct {
	TeamID   uuid.UUID `json:"team_id"`
	PlayerID uuid.UUID `json:"player_id"`
}

func (q *Queries) ChangePlayerTeam(ctx context.Context, arg ChangePlayerTeamParams) error {
	_, err := q.db.Exec(ctx, ChangePlayerTeam, arg.TeamID, arg.PlayerID)
	return err
}

const DeleteAllPlayerTeams = `-- name: DeleteAllPlayerTeams :exec
DELETE FROM player_team
`

func (q *Queries) DeleteAllPlayerTeams(ctx context.Context) error {
	_, err := q.db.Exec(ctx, DeleteAllPlayerTeams)
	return err
}

const ListPlayersByTeamID = `-- name: ListPlayersByTeamID :many
SELECT p.id, p.name, p.created_at, p.updated_at, p.first_name, p.last_name, p.skills, p.power_scores
  FROM player_team pt
  JOIN player p ON p.id = pt.player_id
  WHERE pt.team_id = $1
`

func (q *Queries) ListPlayersByTeamID(ctx context.Context, teamID uuid.UUID) ([]Player, error) {
	rows, err := q.db.Query(ctx, ListPlayersByTeamID, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Skills,
			&i.PowerScores,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListTeamsByPlayerID = `-- name: ListTeamsByPlayerID :many
SELECT t.id, t.name, t.created_at, t.updated_at, t.sport_name, t.power_score, t.wins, t.losses
  FROM player_team pt
  JOIN team t ON t.id = pt.team_id
  WHERE pt.player_id = $1
`

func (q *Queries) ListTeamsByPlayerID(ctx context.Context, playerID uuid.UUID) ([]Team, error) {
	rows, err := q.db.Query(ctx, ListTeamsByPlayerID, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SportName,
			&i.PowerScore,
			&i.Wins,
			&i.Losses,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
