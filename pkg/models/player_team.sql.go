// Code generated by sqlc. DO NOT EDIT.
// source: player_team.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const AddPlayerToTeam = `-- name: AddPlayerToTeam :exec
INSERT INTO player_team (
  player_id, team_id
) VALUES (
  $1, $2
)
`

type AddPlayerToTeamParams struct {
	PlayerID uuid.UUID `json:"player_id"`
	TeamID   uuid.UUID `json:"team_id"`
}

func (q *Queries) AddPlayerToTeam(ctx context.Context, arg AddPlayerToTeamParams) error {
	_, err := q.db.Exec(ctx, AddPlayerToTeam, arg.PlayerID, arg.TeamID)
	return err
}

const ChangePlayerTeam = `-- name: ChangePlayerTeam :exec
UPDATE player_team 
	SET team_id = $1 
	WHERE player_id = $2
`

type ChangePlayerTeamParams struct {
	TeamID   uuid.UUID `json:"team_id"`
	PlayerID uuid.UUID `json:"player_id"`
}

func (q *Queries) ChangePlayerTeam(ctx context.Context, arg ChangePlayerTeamParams) error {
	_, err := q.db.Exec(ctx, ChangePlayerTeam, arg.TeamID, arg.PlayerID)
	return err
}

const DeleteAllPlayerTeams = `-- name: DeleteAllPlayerTeams :exec
DELETE FROM player_team
`

func (q *Queries) DeleteAllPlayerTeams(ctx context.Context) error {
	_, err := q.db.Exec(ctx, DeleteAllPlayerTeams)
	return err
}

const ListPlayersOnTeam = `-- name: ListPlayersOnTeam :many
SELECT player_id, team_id, joined_at 
    FROM player_team
    WHERE team_id = $1
    ORDER BY name
`

func (q *Queries) ListPlayersOnTeam(ctx context.Context, teamID uuid.UUID) ([]PlayerTeam, error) {
	rows, err := q.db.Query(ctx, ListPlayersOnTeam, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlayerTeam
	for rows.Next() {
		var i PlayerTeam
		if err := rows.Scan(&i.PlayerID, &i.TeamID, &i.JoinedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
